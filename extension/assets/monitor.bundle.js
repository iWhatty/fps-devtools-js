(()=>{var y=class{constructor(t=.5){this.weight=t,this.avg=null,this.min=1/0,this.max=-1/0}update(t){return this.avg===null?this.avg=t:this.avg=this.avg*(1-this.weight)+t*this.weight,this.min=Math.min(this.min,t),this.max=Math.max(this.max,t),this.avg}get smoothed(){var t;return(t=this.avg)!=null?t:0}reset(){this.min=1/0,this.max=-1/0}setLagFactor(t){this.weight=t}};var g=class{constructor({threshold:t=60,interval:s=1e3,historySize:i=100,smoother:e,memSmoother:m,onUpdate:h}){this.threshold=t,this.interval=s,this.historySize=i,this.smoother=e,this.memSmoother=m,this.onUpdate=h,this.frames=0,this.frameCount=0,this.stutterCount=0,this.fpsHistory=[]}start(){this.lastTick=performance.now(),this.rafId=requestAnimationFrame(this.trackFrame.bind(this)),this.intervalId=setInterval(this.updateFPS.bind(this),this.interval)}stop(){cancelAnimationFrame(this.rafId),clearInterval(this.intervalId)}trackFrame(t){t-this.lastTick>this.threshold&&this.stutterCount++,this.frames++,this.lastTick=t,this.rafId=requestAnimationFrame(this.trackFrame.bind(this))}updateFPS(){var r;let t=this.frames;this.frames=0,this.frameCount++,t<20&&this.stutterCount++,this.fpsHistory.push(t),this.fpsHistory.length>this.historySize&&this.fpsHistory.shift();let s=[...this.fpsHistory].sort((c,d)=>c-d),i=Math.max(1,Math.floor(s.length*.01)),e=s.slice(0,i).reduce((c,d)=>c+d,0)/i,m=this.smoother.update(t),h=((r=performance.memory)==null?void 0:r.usedJSHeapSize)/1048576||0,o=this.memSmoother.update(h),n=this.stutterCount/this.frameCount*100;typeof this.onUpdate=="function"&&this.onUpdate({raw:t,smoothed:m,onePercentLow:e,stutterRate:n,memory:h,memoryAvg:o})}};var x=class{constructor({width:t=200,height:s=80,maxFPS:i=100}={}){this.canvas=document.createElement("canvas"),this.canvas.width=t,this.canvas.height=s,this.ctx=this.canvas.getContext("2d"),Object.assign(this.canvas.style,{position:"fixed",right:"10px",bottom:"10px",zIndex:9999,background:"rgba(0,0,0,0.75)",border:"1px solid #888",pointerEvents:"none"}),document.body.appendChild(this.canvas),this.history=[],this.smoothHistory=[],this.memHistory=[],this.maxFPS=i}render(t){let{raw:s,smoothed:i,onePercentLow:e,stutterRate:m,memory:h,memoryAvg:o}=t,{ctx:n,canvas:r}=this;this.history.push(s),this.history.length>r.width&&this.history.shift(),this.smoothHistory.push(i),this.smoothHistory.length>r.width&&this.smoothHistory.shift(),this.memHistory.push(h),this.memHistory.length>r.width&&this.memHistory.shift(),n.clearRect(0,0,r.width,r.height),this.plotLine(this.history,"#0f0",this.maxFPS),this.plotLine(this.smoothHistory,"#ff0",this.maxFPS),this.plotLine(this.memHistory,"#f66",200),n.fillStyle="#fff",n.font="10px monospace",n.fillText(`FPS: ${s.toFixed(1)} | Avg: ${i.toFixed(1)}`,4,10),n.fillText(`1% Low: ${e.toFixed(1)} | Stutter: ${m.toFixed(1)}%`,4,22),n.fillText(`Heap: ${h.toFixed(1)} MB | Avg: ${o.toFixed(1)} MB`,4,34)}plotLine(t,s,i){let{ctx:e,canvas:m}=this;e.strokeStyle=s,e.beginPath(),t.forEach((h,o)=>{let n=m.height-h/i*m.height;e.lineTo(o,n)}),e.stroke()}destroy(){this.canvas.remove()}};function P(a,t){localStorage.setItem("fpsOverlayPosition",JSON.stringify({x:a,y:t}))}function F(){try{return JSON.parse(localStorage.getItem("fpsOverlayPosition"))||null}catch(a){return null}}function u(a,t,s){Object.assign(a.style,{left:`${t}px`,top:`${s}px`,right:"auto",bottom:"auto"})}function S(){let a=new y(.5),t=new y(.5),s=new x,i=new g({smoother:a,memSmoother:t,onUpdate:o=>s.render(o)}),e=document.createElement("input");e.type="range",e.min="0.01",e.max="0.99",e.step="0.01",e.value="0.5",Object.assign(e.style,{position:"fixed",right:"10px",bottom:"100px",zIndex:9999}),document.body.appendChild(e),e.addEventListener("input",()=>a.setLagFactor(parseFloat(e.value)));function m(o,n,r){let c=!1,d=!1,l={x:0,y:0};o.addEventListener("mousedown",p=>{c||(d=!0,l={x:p.offsetX,y:p.offsetY})}),window.addEventListener("mousemove",p=>{if(!d)return;let v=p.clientX-l.x,w=p.clientY-l.y;u(o,v,w),u(n,v,w+90),P(v,w)}),window.addEventListener("mouseup",()=>d=!1),o.addEventListener("dblclick",()=>{c=!c,o.style.borderColor=c?"red":"#888"});let f=F();f&&(u(o,f.x,f.y),u(n,f.x,f.y+90))}function h(o,n,r,c="f"){window.addEventListener("keydown",d=>{if(d.shiftKey&&d.key.toLowerCase()===c){let l=o.style.display!=="none";o.style.display=l?"none":"block",n.style.display=l?"none":"block",l?r.stop():r.start()}})}return m(s.canvas,e,i),h(s.canvas,e,i,key="f"),i.start(),{monitor:i,view:s}}window.createPerformanceHUD=S;})();
//# sourceMappingURL=data:application/json;base64,
